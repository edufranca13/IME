function matrix = newton_basis2(f, df, l, u, p, tol, nmax)    rootsArray = [];    for i = 1 : numel (l)    for j = 1: numel (u)      root = fix(newton(f, df, l(i) + u(j), tol, nmax));      cv = find(rootsArray == root);      if (isempty(cv))        rootsArray = [rootsArray root];        matrix (i, j) = length(rootsArray);      else        matrix (i, j) = cv;      endif    endfor  endfor    imagesc (matrix);  endfunctionfunction ans = newton( f, df, x0, tol, nmax )    if nargin == 3        tol = 1e-4;        nmax = 1e1;    elseif nargin == 4        nmax = 1e1;    elseif nargin ~= 5        error('newton: invalid input parameters');    endif        f = inline(f);    df = inline(df);    x(1) = x0 - (f(x0)/df(x0));        ex(1) = abs(x(1)-x0);    k = 2;    while (ex(k-1) >= tol) && (k <= nmax)        x(k) = x(k-1) - (f(x(k-1))/df(x(k-1)));        ex(k) = abs(x(k)-x(k-1));        k = k+1;    endwhile    #nÃ£o converge dentro da tolerancia fornecida    if (k > nmax)      ans = 0;    #converge    else      ans = x(length(x));    endif    endfunctionnewton_basis2('x^4-1', '4*x^3', -2:0.02:2, complex(0, -2:0.02:2), 1, 0.5*10^-10, 1000);