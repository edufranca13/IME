function matrix = newton_basis(f, df, l, u, p, tol, nmax)    rootsArray = [];    linterval = linspace(l(1),l(2), p(1));  uinterval = linspace(u(1),u(2), p(2));    for i = 1 : numel (linterval)    for j = 1: numel (uinterval)      root = round(newton(f, df, linterval(i) + uinterval(j), tol, nmax) * 100) / 100;      cv = find(rootsArray == root);      if (isempty(cv))        rootsArray = [rootsArray root];        matrix (i, j) = length(rootsArray);      else        matrix (i, j) = cv;      endif    endfor  endfor     imagesc (matrix);   endfunctionfunction ans = newton( f, df, x0, tol, nmax )        f = inline(f);    df = inline(df);    x(1) = x0 - (f(x0)/df(x0));        ex(1) = abs(x(1)-x0);    k = 2;    while (ex(k-1) >= tol) && (k <= nmax)        x(k) = x(k-1) - (f(x(k-1))/df(x(k-1)));        ex(k) = abs(x(k)-x(k-1));        k = k+1;    endwhile    #nÃ£o converge dentro da tolerancia fornecida - retorna 0    if (k > nmax)      ans = 0;    #converge - retorna a raiz    else      ans = x(length(x));    endif    endfunctionnewton_basis('x^4-1', '4*x^3', [-2 2], complex(0, [-2,2]), [200, 200], 0.5*10^-10, 1000);newton_basis('x^3-1', '3*x^2', [-2 2], complex(0, [-2,2]), [200, 200], 0.5*10^-10, 1000);